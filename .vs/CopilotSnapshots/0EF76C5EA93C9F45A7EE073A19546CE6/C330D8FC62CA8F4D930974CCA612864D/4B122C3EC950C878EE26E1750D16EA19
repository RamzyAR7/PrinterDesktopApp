using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid;
using DesktopApp.Utilities;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace DesktopApp
{
    public partial class ProductForm : XtraForm
    {
        private DataSet.Product productDataSet = new DataSet.Product();
        private ShoppingDBEntities dbContext;
        private DataView productView;

        public ProductForm()
        {
            InitializeComponent();
            dbContext = new ShoppingDBEntities();

            // Configure layout
            productPanal.Dock = DockStyle.Top;

            // Set form to RTL
            this.RightToLeft = RightToLeft.Yes;
            this.RightToLeftLayout = true;

            // Initialize components
            SetupSearchPanel();
            
            // Load data asynchronously
            LoadDataAsync();
            
            SetupCrudButtons();

            // Handle window resize to adjust columns
            this.Resize += (s, e) => AdjustColumnWidths();
        }

        /// <summary>
        /// Asynchronously loads all product data
        /// </summary>
        private async void LoadDataAsync()
        {
            await LoadingManager.ExecuteDatabaseOperationAsync(this, LoadProductDataAsync, DatabaseOperationType.Load);
            // Configure grid view after data is loaded
            ConfigureGridView();
        }

        private void SetupSearchPanel()
        {
            // Configure the product panel with reduced height for single row layout
            productPanal.Height = 50; // Reduced height
            productPanal.Padding = new Padding(5);
            productPanal.RightToLeft = RightToLeft.Yes;

            // Resize and reposition existing buttons to be smaller and on the left
            ResizeAndRepositionButtons();

            // Create search label
            var searchLabel = new LabelControl
            {
                Text = "بحث:",
                Appearance = { Font = new Font("Arial", 10, FontStyle.Bold) },
                AutoSizeMode = LabelAutoSizeMode.None,
                Size = new Size(35, 20)
            };

            // Create search textbox
            var searchTextBox = new TextEdit
            {
                Properties =
                {
                    NullText = "ابحث عن اسم المنتج، الشركة، أو الصنف...",
                    Appearance = { 
                        TextOptions = { HAlignment = DevExpress.Utils.HorzAlignment.Near },
                        Font = new Font("Arial", 10)
                    }
                },
                Size = new Size(300, 25)
            };

            // Position search controls on the right side of the panel
            searchLabel.Location = new Point(productPanal.Width - searchLabel.Width - 10, 15);
            searchTextBox.Location = new Point(productPanal.Width - searchLabel.Width - searchTextBox.Width - 20, 13);

            // Handle search text changed
            searchTextBox.TextChanged += (s, e) =>
            {
                if (productView != null)
                {
                    string searchText = searchTextBox.Text.Trim();
                    string filter = string.Empty;

                    if (!string.IsNullOrEmpty(searchText))
                    {
                        filter = $"ProductName LIKE '%{searchText}%' OR CompanyName LIKE '%{searchText}%' OR CategoryName LIKE '%{searchText}%'";
                    }

                    productView.RowFilter = filter;
                }
            };

            // Handle panel resize to maintain RTL layout
            productPanal.Resize += (s, e) =>
            {
                searchLabel.Location = new Point(productPanal.Width - searchLabel.Width - 10, 15);
                searchTextBox.Location = new Point(productPanal.Width - searchLabel.Width - searchTextBox.Width - 20, 13);
            };

            // Add controls to panel
            productPanal.Controls.Add(searchTextBox);
            productPanal.Controls.Add(searchLabel);
        }

        private void ResizeAndRepositionButtons()
        {
            // Make buttons smaller and position them on the left side
            var buttonSize = new Size(70, 30);
            var barcodeButtonSize = new Size(85, 30); // Slightly wider for barcode button
            var yPosition = 10;
            var xStart = 10;
            var spacing = 75;

            // Resize and reposition buttons from left to right
            if (NewBtn != null)
            {
                NewBtn.Size = buttonSize;
                NewBtn.Location = new Point(xStart, yPosition);
                NewBtn.Text = "جديد";
            }

            if (EditBtn != null)
            {
                EditBtn.Size = buttonSize;
                EditBtn.Location = new Point(xStart + spacing, yPosition);
                EditBtn.Text = "تعديل";
            }

            if (DeleteBtn != null)
            {
                DeleteBtn.Size = buttonSize;
                DeleteBtn.Location = new Point(xStart + spacing * 2, yPosition);
                DeleteBtn.Text = "حذف";
            }

            if (BtnPrint != null)
            {
                BtnPrint.Size = buttonSize;
                BtnPrint.Location = new Point(xStart + spacing * 3, yPosition);
                BtnPrint.Text = "طباعة";
            }

            // Handle barcode button
            if (btnBarcode != null)
            {
                btnBarcode.Size = barcodeButtonSize;
                btnBarcode.Location = new Point(xStart + spacing * 4, yPosition);
                btnBarcode.Text = "معاينة";
            }
        }

        private async Task LoadProductDataAsync()
        {
            // Clear existing data
            productDataSet.Tables["Product"].Clear();
            
            // Simulate some processing time for demonstration
            await Task.Delay(500);
            
            // Get the products from database with the latest prices
            var products = await Task.Run(() =>
            {
                return dbContext.Products
                    .Select(p => new
                    {
                        p.Id,
                        ProductName = p.Name,
                        CompanyName = p.Company.Name,
                        CategoryName = p.Category.Name,
                        SellingPrice = p.Prices.OrderByDescending(pr => pr.CreatedDate).FirstOrDefault().SellingPrice,
                        PurchasingPrice = p.Prices.OrderByDescending(pr => pr.CreatedDate).FirstOrDefault().PurchasingPrice,
                        p.CreatedDate
                    })
                    .OrderByDescending(p => p.CreatedDate) // Newest first
                    .ToList();
            });

            // Add data to the dataset on UI thread
            foreach (var product in products)
            {
                var row = productDataSet.Tables["Product"].NewRow();
                row["Id"] = product.Id.ToString();
                row["ProductName"] = product.ProductName;
                row["CompanyName"] = product.CompanyName;
                row["CategoryName"] = product.CategoryName;
                row["SellingPrice"] = product.SellingPrice.ToString();
                row["PurchasingPrice"] = product.PurchasingPrice.ToString();
                row["CreatedDate"] = product.CreatedDate.ToString("yyyy-MM-dd");
                productDataSet.Tables["Product"].Rows.Add(row);
            }

            // Set up data view for searching
            productView = new DataView(productDataSet.Tables["Product"]);
            productGrid.DataSource = productView;
        }

        private void LoadProductData()
        {
            // Legacy synchronous method - kept for compatibility
            LoadDataAsync();
        }

        private void ConfigureGridView()
        {
            if (gridView1?.Columns == null || gridView1.Columns.Count == 0)
                return;

            try
            {
                // Configure grid view columns with Arabic headers
                if (gridView1.Columns["Id"] != null)
                    gridView1.Columns["Id"].Visible = false; // Hide ID column

                // Show row numbers
                gridView1.IndicatorWidth = 50;  // Width of the row numbers column
                gridView1.CustomDrawRowIndicator += (s, e) =>
                {
                    if (e.Info.IsRowIndicator && e.RowHandle >= 0)
                    {
                        e.Info.DisplayText = (e.RowHandle + 1).ToString();
                    }
                };

                // Set Arabic captions
                var columnCaptions = new Dictionary<string, string>
                {
                    { "ProductName", "اسم المنتج" },
                    { "CategoryName", "الصنف" },
                    { "CompanyName", "الشركة" },
                    { "SellingPrice", "سعر بيع" },
                    { "PurchasingPrice", "سعر شراء" },
                    { "CreatedDate", "تاريخ الإضافة" }
                };

                foreach (var caption in columnCaptions)
                {
                    if (gridView1.Columns[caption.Key] != null)
                        gridView1.Columns[caption.Key].Caption = caption.Value;
                }

                // Configure grid view appearance
                gridView1.Appearance.HeaderPanel.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
                gridView1.Appearance.Row.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
                gridView1.OptionsView.ShowGroupPanel = false;

                // Set the right-to-left reading order for Arabic text
                gridView1.OptionsView.EnableAppearanceEvenRow = true;
                gridView1.Appearance.EvenRow.BackColor = Color.FromArgb(242, 242, 242);

                // Increase row height
                gridView1.RowHeight = 30;

                // Format price columns with thousands separator
                string[] priceColumns = { "SellingPrice", "PurchasingPrice" };
                foreach (var columnName in priceColumns)
                {
                    if (gridView1.Columns[columnName] != null)
                    {
                        gridView1.Columns[columnName].DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                        gridView1.Columns[columnName].DisplayFormat.FormatString = "N0";
                    }
                }
            int availableWidth = productGrid.Width - gridView1.IndicatorWidth - scrollbarWidth;

            // Define column proportions (total = 100)
            var columnProportions = new Dictionary<string, int>
            {
                { "ProductName", 30 },      // 30%
                { "CategoryName", 15 },     // 15%
                { "CompanyName", 15 },      // 15%
                { "SellingPrice", 13 },     // 13%
                { "PurchasingPrice", 13 },  // 13%
                { "CreatedDate", 14 }       // 14%
            };

            // Apply proportional widths
            foreach (var column in columnProportions)
            {
                if (gridView1.Columns[column.Key] != null)
                {
                    int width = (availableWidth * column.Value) / 100;
                    gridView1.Columns[column.Key].Width = width;
                }
            }

            gridView1.OptionsView.ColumnAutoWidth = false;
        }

        private void productPanal_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnBarcode_Click(object sender, EventArgs e)
        {
            try
            {
                // Get the focused row handle
                int focusedRowHandle = gridView1.FocusedRowHandle;
                if (focusedRowHandle < 0)
                {
                    XtraMessageBox.Show("الرجاء اختيار منتج", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Get product data from the focused row
                var productName = gridView1.GetRowCellValue(focusedRowHandle, "ProductName").ToString();
                var priceStr = gridView1.GetRowCellValue(focusedRowHandle, "SellingPrice").ToString();
                
                if (!decimal.TryParse(priceStr, out decimal sellingPrice))
                {
                    XtraMessageBox.Show("خطأ في قراءة سعر المنتج", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                var barcodePreview = new ParcodePreviewForm(productName, sellingPrice);
                barcodePreview.ShowDialog();
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"حدث خطأ: {ex.Message}", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void PrintBarcodeBtn_Click(object sender, EventArgs e)
        {
            try
            {
                // Get the focused row handle
                int focusedRowHandle = gridView1.FocusedRowHandle;
                if (focusedRowHandle < 0)
                {
                    XtraMessageBox.Show("الرجاء اختيار منتج", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Get product data from the focused row
                var productName = gridView1.GetRowCellValue(focusedRowHandle, "ProductName").ToString();
                var priceStr = gridView1.GetRowCellValue(focusedRowHandle, "SellingPrice").ToString();
                
                if (!decimal.TryParse(priceStr, out decimal sellingPrice))
                {
                    XtraMessageBox.Show("خطأ في قراءة سعر المنتج", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                // Show the copy selection form
                using (var copyForm = new BarcodeCopyForm())
                {
                    if (copyForm.ShowDialog() == DialogResult.OK)
                    {
                        int numberOfCopies = copyForm.NumberOfCopies;
                        
                        // Show loading message
                        this.Cursor = Cursors.WaitCursor;
                        
                        // Print silently
                        SilentPrintUtility.PrintBarcodeSilent(productName, sellingPrice, numberOfCopies);
                        
                        // Show success message
                        XtraMessageBox.Show($"تم طباعة {numberOfCopies} نسخة بنجاح", "نجحت العملية", 
                                          MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"حدث خطأ في الطباعة: {ex.Message}", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {

        }

        private void SetupCrudButtons()
        {
            // Setup Create button (NewBtn)
            NewBtn.Click += BtnCreate_Click;
            EditBtn.Click += EditBtn_Click;
            DeleteBtn.Click += DeleteBtn_Click;
            
            // Wire up btnBarcode click event
            if (btnBarcode != null)
                btnBarcode.Click += btnBarcode_Click;
            
            // Configure button properties
            NewBtn.Appearance.Font = new Font("Tahoma", 10, FontStyle.Bold);
            EditBtn.Appearance.Font = new Font("Tahoma", 10, FontStyle.Bold);
            DeleteBtn.Appearance.Font = new Font("Tahoma", 10, FontStyle.Bold);
            
            // Set button colors
            NewBtn.Appearance.BackColor = Color.ForestGreen;
            NewBtn.Appearance.ForeColor = Color.White;
            EditBtn.Appearance.BackColor = Color.DodgerBlue;
            EditBtn.Appearance.ForeColor = Color.White;
            DeleteBtn.Appearance.BackColor = Color.Crimson;
            DeleteBtn.Appearance.ForeColor = Color.White;

            // Add double-click to edit functionality
            gridView1.DoubleClick += gridView1_DoubleClick;
        }

        private async void BtnCreate_Click(object sender, EventArgs e)
        {
            try
            {
                // Open create form
                using (var createForm = new ProductCUForm())
                {
                    if (createForm.ShowDialog() == DialogResult.OK && createForm.ProductSaved)
                    {
                        // Refresh the grid with loading indicator
                        await RefreshProductDataAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"خطأ في إضافة منتج جديد: {ex.Message}", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void EditBtn_Click(object sender, EventArgs e)
        {
            try
            {
                // Get the focused row handle
                int focusedRowHandle = gridView1.FocusedRowHandle;
                if (focusedRowHandle < 0)
                {
                    XtraMessageBox.Show("الرجاء اختيار منتج للتعديل", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Get product ID from the focused row
                var productIdStr = gridView1.GetRowCellValue(focusedRowHandle, "Id").ToString();
                if (int.TryParse(productIdStr, out int productId))
                {
                    // Open edit form
                    using (var editForm = new ProductCUForm(productId))
                    {
                        if (editForm.ShowDialog() == DialogResult.OK && editForm.ProductSaved)
                        {
                            // Refresh the grid with loading indicator
                            await RefreshProductDataAsync();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"خطأ في تحديث المنتج: {ex.Message}", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void DeleteBtn_Click(object sender, EventArgs e)
        {
            try
            {
                // Get the focused row handle
                int focusedRowHandle = gridView1.FocusedRowHandle;
                if (focusedRowHandle < 0)
                {
                    XtraMessageBox.Show("الرجاء اختيار منتج للحذف", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Get product data from the focused row
                var productIdStr = gridView1.GetRowCellValue(focusedRowHandle, "Id").ToString();
                var productName = gridView1.GetRowCellValue(focusedRowHandle, "ProductName").ToString();

                // Confirm deletion
                var result = XtraMessageBox.Show($"هل أنت متأكد من حذف المنتج '{productName}'؟\n\nتحذير: هذا الإجراء لا يمكن التراجع عنه", 
                    "تأكيد الحذف", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (result == DialogResult.Yes && int.TryParse(productIdStr, out int productId))
                {
                    await LoadingManager.ExecuteDatabaseOperationAsync(this, async () =>
                    {
                        await Task.Run(() =>
                        {
                            using (var context = new ShoppingDBEntities())
                            {
                                // Find the product
                                var product = context.Products.FirstOrDefault(p => p.Id == productId);
                                if (product != null)
                                {
                                    // Delete related records first
                                    var prices = context.Prices.Where(p => p.ProductId == productId);
                                    context.Prices.RemoveRange(prices);

                                    var images = context.ProductImages.Where(pi => pi.ProductId == productId);
                                    context.ProductImages.RemoveRange(images);

                                    // Delete the product
                                    context.Products.Remove(product);
                                    context.SaveChanges();
                                }
                            }
                        });

                        XtraMessageBox.Show("تم حذف المنتج بنجاح", "نجح", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        
                        // Refresh the grid
                        await LoadProductDataAsync();
                        
                    }, DatabaseOperationType.Delete);
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"خطأ في حذف المنتج: {ex.Message}", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task RefreshProductDataAsync()
        {
            await LoadingManager.ExecuteDatabaseOperationAsync(this, async () =>
            {
                // Clear existing data
                productDataSet.Tables["Product"].Clear();
                
                // Reload data
                await LoadProductDataAsync();
                
                // Refresh the view on UI thread
                productView = new DataView(productDataSet.Tables["Product"]);
                productGrid.DataSource = productView;
                
                // Adjust columns
                AdjustColumnWidths();
                
            }, DatabaseOperationType.Load);
        }

        private void RefreshProductData()
        {
            // Legacy synchronous method - now calls async version
            Task.Run(async () => await RefreshProductDataAsync());
        }

        // Add double-click to edit functionality
        private void gridView1_DoubleClick(object sender, EventArgs e)
        {
            EditBtn_Click(sender, e);
        }
    }
}
